{"version":3,"sources":["webpack://materialui/./lib/treeview.jsx"],"names":["useStyles","makeStyles","root","flexGrow","maxWidth","withComponentFeatures","props","classes","makeNodes","nodes","children","Array","isArray","map","x","key","id","nodeId","label","name","onClick","node","hasCallback","notifyOfEvent","Fragment","className","defaultCollapseIcon","defaultExpandIcon"],"mappings":"+GAAA,iGASMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,EACVC,SAAU,OA0CCC,uBAtCI,SAACC,GAChB,IAAMC,EAAUP,IAQVQ,EAAY,SAACC,GACf,IAAIC,EAAWD,EAMf,OALKE,MAAMC,QAAQF,KAEfA,EAAW,CAACD,IAGTC,EAASG,KAAI,SAAAC,GAChB,OAAKA,EAEE,kBAAC,IAAD,CAAUC,IAAKD,EAAEE,GAAIA,GAAIF,EAAEE,GAAIC,OAAQH,EAAEE,GAAIE,MAAOJ,EAAEK,KAAMC,QAAS,kBAhBnEC,EAgBiFP,OAf1FR,EAAMgB,aACNhB,EAAMiB,cAAc,GAAIF,IAFhB,IAACA,IAkBDV,MAAMC,QAAQE,EAAEJ,UAAYI,EAAEJ,SAASG,IAAIL,GAAaA,EAAUM,EAAEJ,WAJ7D,kBAAC,IAAMc,SAAP,UAUvB,OACI,kBAAC,IAAD,CACIC,UAAWlB,EAAQL,KACnBwB,oBAAqB,kBAAC,IAAD,MACrBC,kBAAmB,kBAAC,IAAD,OAElBnB,EAAUG,MAAMC,QAAQN,EAAMe,MAAQf,EAAMe,KAAO,CAACf,EAAMe","file":"UDTreeView.eadb7186c2ceb7e221f6.bundle.js","sourcesContent":["import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { withComponentFeatures } from './universal-dashboard';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    maxWidth: 400\r\n  },\r\n});\r\n\r\nconst UDTreeView = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onClick = (node) => {\r\n        if (props.hasCallback) {\r\n            props.notifyOfEvent('', node)\r\n        }\r\n    }\r\n\r\n    const makeNodes = (nodes) => {\r\n        var children = nodes;\r\n        if (!Array.isArray(children))\r\n        {\r\n            children = [nodes];\r\n        }\r\n\r\n        return children.map(x => {\r\n            if (!x) return <React.Fragment />\r\n\r\n            return <TreeItem key={x.id} id={x.id} nodeId={x.id} label={x.name} onClick={() => onClick(x)}>\r\n                {\r\n                    Array.isArray(x.children) ? x.children.map(makeNodes) : makeNodes(x.children)  \r\n                }\r\n            </TreeItem>\r\n        });\r\n    }\r\n\r\n    return (\r\n        <TreeView\r\n            className={classes.root}\r\n            defaultCollapseIcon={<ExpandMoreIcon />}\r\n            defaultExpandIcon={<ChevronRightIcon />}\r\n            >\r\n            {makeNodes(Array.isArray(props.node) ? props.node : [props.node])}\r\n        </TreeView>\r\n    )\r\n}\r\n\r\nexport default withComponentFeatures(UDTreeView);"],"sourceRoot":""}